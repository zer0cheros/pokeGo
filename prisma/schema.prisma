// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Pokemon {
  id        String     @default(cuid()) @id
  name     String
  base_experience   String?
  catched Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String
  img String?
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  pokemons      Pokemon[]
  stats         Stats[]
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}
model Account {
  id                 String  @default(cuid()) @id
  userId             String 
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @default(cuid()) @id
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stats {
  id String @default(cuid()) @id
  credits Int @default(5)
  experience Int
  level Int @default(1)  
  userId String @unique
  ultraball Int @default(0)
  masterball Int @default(0)
  user   User   @relation(fields: [userId], references: [id])
}
model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}